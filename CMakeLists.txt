cmake_minimum_required(VERSION 3.13)

set(VERSION_MAJOR "1")
set(VERSION_MINOR "0")
set(VERSION_PATCH "0")
string(TIMESTAMP COMPILE_TIME %m%d_%H%M%S)
set(CACHE_FILE ${CMAKE_CURRENT_SOURCE_DIR}/BuildNumberCache.txt)
IF(EXISTS ${CACHE_FILE})
    file(READ ${CACHE_FILE} VERSION_PATCH)
ELSE()
    set(VERSION_PATCH "1")
ENDIF()
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    IF(EXISTS ${CACHE_FILE})
        math(EXPR VERSION_PATCH "${VERSION_PATCH}+1")
        file(WRITE ${CACHE_FILE} "${VERSION_PATCH}")
    ENDIF()
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/version.h.in ${CMAKE_CURRENT_SOURCE_DIR}/include/version.h @ONLY)
endif()

project(dceapi VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
set(CMAKE_CXX_STANDARD 20)
set(THREAD_PREFER_PTHREAD_FLAG ON)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_FLAGS "-Wall -Wextra -Wnon-virtual-dtor -Wpedantic -Werror -Wno-unused-parameter -Wno-unused-function -Wno-missing-field-initializers")
set(CMAKE_CXX_FLAGS_DEBUG "-ggdb")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")

message("Build target as ${CMAKE_BUILD_TYPE} mode")
message("Compiler: ${CMAKE_CXX_COMPILER_ID}")
message("Compiler version: ${CMAKE_CXX_COMPILER_VERSION}")
if(CMAKE_CXX_COMPILER_VERSION GREATER 11)
    add_compile_options(--param destructive-interference-size=64)
    add_compile_definitions(_GLIBCXX_USE_DEPRECATED=0)
    include_directories(BEFORE "/usr/local/include/c++/${CMAKE_CXX_COMPILER_VERSION}")
    message("Include path: /usr/local/include/c++/${CMAKE_CXX_COMPILER_VERSION}")
endif()
include_directories("${CMAKE_SOURCE_DIR}/include")

if (NOT DEFINED BUILD_OUTPUT)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
else()
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${BUILD_OUTPUT})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BUILD_OUTPUT})
endif()
message("library build output ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
message("runtime build output ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")

find_package(fmt REQUIRED)
find_package(spdlog REQUIRED)
find_package(cxxopts CONFIG REQUIRED)
find_package(Threads REQUIRED)

add_subdirectory(deps/licensecxx)
add_subdirectory(src)
