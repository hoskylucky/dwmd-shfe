# clang-format 16
# 語言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto
Language: Cpp
BasedOnStyle: LLVM
# 訪問說明符（public、private…）的偏移
AccessModifierOffset: -4
# 開括號後的對齊: Align, DontAlign, AlwaysBreak（總是在開括號後換行）
AlignAfterOpenBracket: Align
AlignArrayOfStructures: None
# 連續賦值時，對齊所有等號
AlignConsecutiveAssignments: false
AlignConsecutiveBitFields: false
# 連續宣告時，對齊所有宣告的變數名稱
AlignConsecutiveDeclarations: false
AlignConsecutiveMacros:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
  AlignCompound: true
  PadOperators: false
AlignConsecutiveShortCaseStatements:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
  AlignCaseColons: false
# 左對齊跳脫換行（使用反斜杠換行）的反斜杠
AlignEscapedNewlines: Left
# 水平對齊二元和三元表達式的操作數
AlignOperands: Align
# 對齊連續的尾隨的註釋
AlignTrailingComments:
  Kind: Always
  OverEmptyLines: 1
AllowAllArgumentsOnNextLine: false
# AllowAllConstructorInitializersOnNextLine: false (deprecated)
# 允許函數聲明的所有參數在放在下一行
AllowAllParametersOfDeclarationOnNextLine: false
# 允許短的塊放在同一行
AllowShortBlocksOnASingleLine: Always
# 允許短的 case 標簽放在同一行
AllowShortCaseLabelsOnASingleLine: true
AllowShortEnumsOnASingleLine: true
# 允許短的函數放在同一行: None, InlineOnly, Empty, Inline, All
AllowShortFunctionsOnASingleLine: All
# 允許短的 if 語句保持在同一行: Never, WithoutElse, OnlyFirstIf, AllIfsAndElse
#   Never, WithoutElse, Always before clang 13
AllowShortIfStatementsOnASingleLine: AllIfsAndElse
AllowShortLambdasOnASingleLine: All
# 允許短的循環保持在同一行
AllowShortLoopsOnASingleLine: true
# AlwaysBreakAfterDefinitionReturnType: None (deprecated)
AlwaysBreakAfterReturnType: AllDefinitions
# 總是在多行 string 字面量前換行
AlwaysBreakBeforeMultilineStrings:	false
# 總是在 template 宣告後換行
AlwaysBreakTemplateDeclarations: Yes
# AttributeMacros: ['__output']
# false 表示函數實參要麽都在同一行，要麽都各自一行
BinPackArguments: false
# false 表示所有形參要麽都在同一行，要麽都各自一行
BinPackParameters: false
BitFieldColonSpacing: After
# 大括號換行，只有當 BreakBeforeBraces 設置為 Custom 時才有效
# BraceWrapping: 
  # AfterCaseLabel: false
  # class定義後面
  # AfterClass:	false
  # 控制語句後面
  # AfterControlStatement:	false
  # enum定義後面
  # AfterEnum:	false
  # 函數定義後面
  # AfterFunction:	false
  # 命名空間定義後面
  # AfterNamespace:	false
  # ObjC定義後面
  # AfterObjCDeclaration:	false
  # struct定義後面
  # AfterStruct:	false
  # union定義後面
  # AfterUnion:	false
  # AfterExternBlock: false
  # catch之前
  # BeforeCatch:	false
  # else之前
  # BeforeElse:	false
  # BeforeLambdaBody: false
  # BeforeWhile: false
  # 縮進大括號
  # IndentBraces:	false
  # SplitEmptyFunction: false
  # SplitEmptyRecord: false
  # SplitEmptyNamespace
BracedInitializerIndentWidth: 4
BreakAfterAttributes: Leave
# BreakAfterJavaFieldAnnotations: false
BreakArrays: false
# 在二元運算符前換行: None, NonAssignment(在非賦值的操作符前換行), All(在操作符前換行)
BreakBeforeBinaryOperators:	None
# 在大括號前換行: Attach(始終將大括號附加到周圍的上下文), Linux(除函數、命名空間和類定義，與Attach類似), 
#   Mozilla(除枚舉、函數、記錄定義，與Attach類似), Stroustrup(除函數定義、catch、else，與Attach類似), 
#   Allman(總是在大括號前換行), GNU(總是在大括號前換行，並對於控制語句的大括號增加額外的縮進), WebKit(在函數前換行), Custom
#   註：這裏認為語句塊也屬於函數
BreakBeforeBraces: Attach
BreakBeforeConceptDeclarations: Always
BreakBeforeInlineASMColon: OnlyMultiline
# 在三元運算符前換行
BreakBeforeTernaryOperators: false
# 在構造函數的初始化列表的逗號前換行
BreakConstructorInitializers: AfterColon
BreakInheritanceList: AfterComma
BreakStringLiterals: true
# 每行字符的限制，0表示沒有限制
ColumnLimit: 100
# 描述具有特殊意義的註釋的正則表達式，它不應該被分割為多行或以其它方式改變
# CommentPragmas:	'^ IWYU pragma:'
CompactNamespaces: false
# ConstructorInitializerAllOnOneLineOrOnePerLine: true (deprecated)
# 構造函數的初始化列表的縮進寬度
ConstructorInitializerIndentWidth: 4
# 延續的行的縮進寬度
ContinuationIndentWidth: 4
# 去除C++11的列表初始化的大括號{後和}前的空格
Cpp11BracedListStyle: false
# DeriveLineEnding: false (deprecated)
# 繼承最常用的指針和引用的對齊方式
DerivePointerAlignment:	false
# 關閉格式化
DisableFormat: false
EmptyLineAfterAccessModifier: Never
EmptyLineBeforeAccessModifier: Always
# 自動檢測函數的調用和定義是否被格式為每行一個參數(Experimental)
ExperimentalAutoDetectBinPacking:	false
FixNamespaceComments: true
# 需要被解讀為foreach循環而不是函數調用的宏
# ForEachMacros:	[ foreach, Q_FOREACH, BOOST_FOREACH ]
# IfMacros: ['IF']
IncludeBlocks: Merge
# 對#include進行排序，匹配了某正則表達式的#include擁有對應的優先級，匹配不到的則默認優先級為INT_MAX(優先級越小排序越靠前)，
#   可以定義負數優先級從而保證某些#include永遠在最前面
# IncludeCategories: 
  # - Regex:	'^"(llvm|llvm-c|clang|clang-c)/'
  #   Priority:	2
  #   SortPriority: 2
  #   CaseSensitive: true
  # - Regex:	'^(<|"(gtest|isl|json)/)'
  #   Priority:	3
  # - Regex:	'.*'
  #   Priority:	1
# IncludeIsMainRegex: 
# IncludeIsMainSourceRegex:
IndentAccessModifiers: false
IndentCaseBlocks: false
# 縮進case標簽
IndentCaseLabels:	false
IndentExternBlock: Indent
IndentGotoLabels: true
IndentPPDirectives: BeforeHash
IndentRequiresClause: false
# 縮進寬度
IndentWidth: 4
# 函數返回類型換行時，縮進函數聲明或函數定義的函數名
IndentWrappedFunctionNames:	false
InsertBraces: false
InsertNewlineAtEOF: true
InsertTrailingCommas: None
# IntegerLiteralSeparator:
#   Binary: 4
#   BinaryMinDigits: 9
#   Decimal: 3
#   DecimalMinDigits: 7
#   Hex: 4
#   HexMinDigits: 9
# JavaImportGroups: ['com']
# JavaScriptQuotes: Double
# JavaScriptWrapImports: true
KeepEmptyLinesAtEOF: true
# 保留在塊開始處的空行
KeepEmptyLinesAtTheStartOfBlocks:	true
LambdaBodyIndentation: Signature
LineEnding: LF
# 開始一個塊的宏的正則表達式
# MacroBlockBegin: ''
# 結束一個塊的宏的正則表達式
# MacroBlockEnd: ''
# Macros: (list of strings)
# 連續空行的最大數量
MaxEmptyLinesToKeep: 1
# 命名空間的縮進: None, Inner(縮進嵌套的命名空間中的內容), All
NamespaceIndentation: Inner
# NamespaceMacros:
# ObjCBinPackProtocolList: Never
# ObjCBlockIdentWidth: 4
# ObjcBreakBeforeNestedBlockParam: false
# ObjCSpaceAfterProperty: false
# ObjcSpaceBeforeProtocolList: false
PPIndentWidth: -1
PackConstructorInitializers: CurrentLine
PenaltyBreakAssignment: 6
# 在call(後對函數調用換行的penalty
PenaltyBreakBeforeFirstCallParameter: 19
# 在一個註釋中引入換行的penalty
PenaltyBreakComment: 300
# 第一次在<<前換行的penalty
PenaltyBreakFirstLessLess: 120
PenaltyBreakOpenParenthesis: 40
# 在一個字符串字面量中引入換行的penalty
PenaltyBreakString:	1000
PenaltyBreakTemplateDeclaration: 10
# 對於每個在行字符數限制之外的字符的penalty
PenaltyExcessCharacter:	1000000
PenaltyIndentedWhitespace: 0
# 將函數的返回類型放到它自己的行的penalty
PenaltyReturnTypeOnItsOwnLine:	60
# 指針和引用的對齊: Left, Right, Middle
PointerAlignment: Left
# 不要用 Custom QualifierAlignment, 一直到 clang-format 16 還是會錯
QualifierAlignment: Leave
# QualifierOrder: ['static', 'inline', 'constexpr', 'volatile', 'const', 'type']
# RawStringFormats: 
ReferenceAlignment: Pointer
# 允許重新排版註釋
ReflowComments:	true
RemoveBracesLLVM: true
RemoveParentheses: Leave
RemoveSemicolon: true
RequiresClausePosition: OwnLine
RequiresExpressionIndentation: OuterScope
SeparateDefinitionBlocks: Leave
ShortNamespaceLines: 1
# 允許排序#include
SortIncludes:	CaseSensitive
# SortJavaStaticImport: Before
SortUsingDeclarations: LexicographicNumeric
# 在C風格類型轉換後添加空格
SpaceAfterCStyleCast:	false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: true
SpaceAroundPointerQualifiers: Default
# 在賦值運算符之前添加空格
SpaceBeforeAssignmentOperators:	true
SpaceBeforeCaseColon: false
# 開圓括號之前添加一個空格: Never, ControlStatements, Always
SpaceBeforeCpp11BracedList: true
SpaceBeforeCtorInitializerColon: false
SpaceBeforeInheritanceColon: false
# SpaceBeforeJsonColon: false
SpaceBeforeParens: Never
# SpaceBeforeParensOptions:
  # AfterControlStatements: false
  # AfterForeachMacros: false
  # AfterFunctionDeclarationName: false
  # AfterFunctionDefinitionName: false
  # AfterIfMacros: false
  # AfterOverloadedOperator: false
  # AfterRequiresInCause: false
  # AfterRequiresInExpression: false
  # BeforeNonEmptyParentheses: false
SpaceBeforeRangeBasedForLoopColon: false
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: false
# 在空的圓括號中添加空格
SpaceInEmptyParentheses:	false
# 在尾隨的評論前添加的空格數(只適用於//)
SpacesBeforeTrailingComments: 2
# 在尖括號的<後和>前添加空格
SpacesInAngles:	Never
# 在C風格類型轉換的括號中添加空格
SpacesInCStyleCastParentheses: false
SpacesInConditionalStatement: false
# 在容器(ObjC和JavaScript的數組和字典等)字面量中添加空格
SpacesInContainerLiterals: false
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: -1
# 在圓括號的(後和)前添加空格
SpacesInParens: Never
# SpacesInParensOptions:
# 在方括號的[後和]前添加空格，lamda表達式和未指明大小的數組的聲明不受影響
SpacesInSquareBrackets:	false
Standard: c++20
# StatementAttributeLikeMacros: 
# StatementMacros: 
# tab 寬度
TabWidth: 4
# TypeNames:
# TypenameMacros:
# UseCRLF: false (deprecated)
# 使用 tab 字元: Never, ForIndentation, ForContinuationAndIndentation, Always
UseTab:	Never
# VerilogBreakBetweenInstancePorts: false
# WhitespaceSensitiveMacros:
